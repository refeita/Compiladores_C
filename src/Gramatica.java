/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
import java.util.*;
import java.io.*;

public class Gramatica extends Exception implements GramaticaConstants {
  public static void main(String args []) throws ParseException, IOException, Exception
  {
    Gramatica parser = new Gramatica(new FileInputStream("Codigo_Teste.txt"));
    try
    {
      Gramatica.start(); // starta!!
    }
    catch (ParseException e)
    {
      System.out.println("Erros foram encontrados. " + e); // Se erros forem encontrados, o JAVACC lan√ßa a Exception
    }
  }

  static final public int start() throws ParseException, Exception {
    label_1:
    while (true) {
      Programa();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case VOID:
      case CHAR:
      case INT:
      case FLOAT:
      case DOUBLE:
      case IF:
      case WHILE:
      case FOR:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case IDENTIFICADOR:
      case AC:
      case AP:
      case PV:
      case INCREMENTO:
      case DECREMENTO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case 84:
      case 85:
      case 86:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
    System.out.print("Gramatica Aceita. \u005cn");
    {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public void Programa() throws ParseException, Exception {
    DefinicaoFuncao();

  }

  static final public void DefinicaoFuncao() throws ParseException, Exception {
  Token t = null;
    if (jj_2_1(2147483647)) {
      ListaDeclaracao();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IF:
    case WHILE:
    case FOR:
    case CONTINUE:
    case BREAK:
    case RETURN:
    case IDENTIFICADOR:
    case AC:
    case AP:
    case PV:
    case INCREMENTO:
    case DECREMENTO:
    case SUBTRACAO:
    case MULTIPLICACAO:
    case 84:
    case 85:
    case 86:
      ListaDeclaracoes();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }

    EspecificadoresdeTipo();
    // tipo_de_retorno
        t = jj_consume_token(IDENTIFICADOR);

    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case CHAR:
    case INT:
    case FLOAT:
    case DOUBLE:
      ListaTiposParametros();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(FP);

    CorpoFuncao();

  }

  static final public void ListaTiposParametros() throws ParseException {
    ListadeParametros();

  }

  static final public void ListadeParametros() throws ParseException {
    DeclaracaoParametro();
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(VIRGULA);
      DeclaracaoParametro();
    }

  }

  static final public void DeclaracaoParametro() throws ParseException {
    EspecificadoresdeTipo();
    VariavelParam();

  }

  static final public void CorpoFuncao() throws ParseException {
    jj_consume_token(AC);
    if (jj_2_3(2147483647)) {
      ListaDeclaracao();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IF:
    case WHILE:
    case FOR:
    case CONTINUE:
    case BREAK:
    case RETURN:
    case IDENTIFICADOR:
    case AC:
    case AP:
    case PV:
    case INCREMENTO:
    case DECREMENTO:
    case SUBTRACAO:
    case MULTIPLICACAO:
    case 84:
    case 85:
    case 86:
      ListaDeclaracoes();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(FC);

  }

  static final public void ListaDeclaracoes() throws ParseException {
    label_3:
    while (true) {
      DeclaracaoTipo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IF:
      case WHILE:
      case FOR:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case IDENTIFICADOR:
      case AC:
      case AP:
      case PV:
      case INCREMENTO:
      case DECREMENTO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case 84:
      case 85:
      case 86:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }

  }

  static final public void DeclaracaoTipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFICADOR:
    case AP:
    case PV:
    case INCREMENTO:
    case DECREMENTO:
    case SUBTRACAO:
    case MULTIPLICACAO:
    case 84:
    case 85:
    case 86:
      DeclaracaoExpressao();
      break;
    case AC:
      CorpoFuncao();
      break;
    case IF:
      DeclaracaoCondicional();
      break;
    case WHILE:
    case FOR:
      DeclaracaoIteracao();
      break;
    case CONTINUE:
    case BREAK:
    case RETURN:
      DeclaracaoDesvio();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void DeclaracaoCondicional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(AP);
    Expressao();
    jj_consume_token(FP);

    DeclaracaoTipo();

    if (jj_2_4(2)) {
      jj_consume_token(ELSE);
      DeclaracaoTipo();
    } else {
      ;
    }


  }

  static final public void DeclaracaoIteracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(AP);
      Expressao();
      jj_consume_token(FP);

      DeclaracaoTipo();

      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(AP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFICADOR:
      case AP:
      case INCREMENTO:
      case DECREMENTO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case 84:
      case 85:
      case 86:
        Expressao();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(PV);

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFICADOR:
      case AP:
      case INCREMENTO:
      case DECREMENTO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case 84:
      case 85:
      case 86:
        Expressao();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }

      jj_consume_token(PV);

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFICADOR:
      case AP:
      case INCREMENTO:
      case DECREMENTO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case 84:
      case 85:
      case 86:
        Expressao();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(FP);

      DeclaracaoTipo();

      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void DeclaracaoDesvio() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(PV);

      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(PV);

      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFICADOR:
      case AP:
      case INCREMENTO:
      case DECREMENTO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case 84:
      case 85:
      case 86:
        Expressao();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(PV);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void ListaDeclaracao() throws ParseException {
    label_4:
    while (true) {
      EspecificadoresDeclaracao();
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_4;
      }
    }

  }

  static final public void EspecificadoresDeclaracao() throws ParseException {
    DeclaracaoEspecificadores();
    ListaDeclaradoresInicializacao();
    jj_consume_token(PV);

  }

  static final public void DeclaracaoEspecificadores() throws ParseException {
    EspecificadoresdeTipo();
    if (jj_2_6(2147483647)) {
      DeclaracaoEspecificadores();
    } else {
      ;
    }

  }

  static final public void EspecificadoresdeTipo() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      t = jj_consume_token(VOID);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void ListaDeclaradoresInicializacao() throws ParseException {
    DeclaradorInit();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRGULA);
      DeclaradorInit();

    }
  }

  static final public void DeclaradorInit() throws ParseException {
  Token t = null;
    VariavelParam();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      Inicializador();

      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }

  }

  static final public void VariavelParam() throws ParseException {
    DeclaracaoDireta();

  }

  static final public void DeclaracaoDireta() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      t = jj_consume_token(IDENTIFICADOR);
      break;
    case AP:
      jj_consume_token(AP);
      VariavelParam();
      jj_consume_token(FP);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void ListaInicializadores() throws ParseException {
    Inicializador();
    label_6:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(VIRGULA);
      Inicializador();
    }

  }

  static final public void Inicializador() throws ParseException {
    ExpressaoAtribuicao();

  }

  static final public void ExpressaoConstante() throws ParseException {
    ExpressaoCondicional();

  }

  static final public void DeclaracaoExpressao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFICADOR:
    case AP:
    case INCREMENTO:
    case DECREMENTO:
    case SUBTRACAO:
    case MULTIPLICACAO:
    case 84:
    case 85:
    case 86:
      Expressao();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(PV);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      jj_consume_token(PRINT);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCAN:
      jj_consume_token(SCAN);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }

  }

  static final public void Expressao() throws ParseException {
    ExpressaoAtribuicao();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRGULA);
      ExpressaoAtribuicao();
    }

  }

  static final public void ExpressaoAtribuicao() throws ParseException {
    if (jj_2_8(2147483647)) {
      ExpressaoUnaria();
      OperadorAtribuicao();

      ExpressaoAtribuicao();

    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFICADOR:
      case AP:
      case INCREMENTO:
      case DECREMENTO:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case 84:
      case 85:
      case 86:
        ExpressaoCondicional();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

  }

  static final public void OperadorAtribuicao() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      t = jj_consume_token(IGUAL);
      break;
    case 74:
      t = jj_consume_token(74);
      break;
    case 75:
      t = jj_consume_token(75);
      break;
    case 76:
      t = jj_consume_token(76);
      break;
    case 77:
      t = jj_consume_token(77);
      break;
    case 78:
      t = jj_consume_token(78);
      break;
    case 79:
      t = jj_consume_token(79);
      break;
    case 80:
      t = jj_consume_token(80);
      break;
    case 81:
      t = jj_consume_token(81);
      break;
    case 82:
      t = jj_consume_token(82);
      break;
    case 83:
      t = jj_consume_token(83);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void ExpressaoUnaria() throws ParseException {
  Token t = null;
    if (jj_2_9(3)) {
      ExpressaoIncreDecre();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENTO:
        t = jj_consume_token(INCREMENTO);
        ExpressaoUnaria();
        break;
      case DECREMENTO:
        t = jj_consume_token(DECREMENTO);
        ExpressaoUnaria();
        break;
      case SUBTRACAO:
        t = jj_consume_token(SUBTRACAO);
        ExpressaoUnaria();
        break;
      case 84:
        t = jj_consume_token(84);
        ExpressaoUnaria();
        break;
      case MULTIPLICACAO:
        t = jj_consume_token(MULTIPLICACAO);
        ExpressaoUnaria();
        break;
      case 85:
        t = jj_consume_token(85);
        ExpressaoUnaria();
        break;
      case 86:
        t = jj_consume_token(86);
        ExpressaoUnaria();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

  }

  static final public void ExpressaoIncreDecre() throws ParseException {
  Token t = null;
    ExpressaoPrimaria();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACO:
      case INCREMENTO:
      case DECREMENTO:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACO:
        jj_consume_token(ACO);
        Expressao();
        jj_consume_token(FCO);
        break;
      case INCREMENTO:
        t = jj_consume_token(INCREMENTO);
        break;
      case DECREMENTO:
        t = jj_consume_token(DECREMENTO);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }

  }

  static final public void ExpressaoPrimaria() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      t = jj_consume_token(IDENTIFICADOR);
      break;
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Constant();
      break;
    case AP:
      jj_consume_token(AP);
      Expressao();
      jj_consume_token(FP);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void ExpressaoCondicional() throws ParseException {
    OULogico();

  }

  static final public void OULogico() throws ParseException {
  Token t = null;
    ELogico();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 87:
      t = jj_consume_token(87);
      OULogico();

      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  static final public void ELogico() throws ParseException {
  Token t = null;
    ORbits();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 88:
      t = jj_consume_token(88);
      ELogico();

      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void ORbits() throws ParseException {
  Token t = null;
    ORExclusivoBits();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 89:
      t = jj_consume_token(89);
      ORbits();

      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  static final public void ORExclusivoBits() throws ParseException {
  Token t = null;
    AndBits();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 90:
      t = jj_consume_token(90);
      ORExclusivoBits();

      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static final public void AndBits() throws ParseException {
  Token t = null;
    ExpressaoIgualdade();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 84:
      t = jj_consume_token(84);
      AndBits();

      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static final public void ExpressaoIgualdade() throws ParseException {
  Token t = null;
    ExpressaoRelacional();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUALIGUAL:
    case DIFERENTE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALIGUAL:
        t = jj_consume_token(IGUALIGUAL);
        break;
      case DIFERENTE:
        t = jj_consume_token(DIFERENTE);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExpressaoIgualdade();

      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
  }

  static final public void ExpressaoRelacional() throws ParseException {
  Token t = null;
    DeslocamentoBits();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIORIGUAL:
    case MENORIGUAL:
    case MAIOR:
    case MENOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        t = jj_consume_token(MENOR);
        break;
      case MAIOR:
        t = jj_consume_token(MAIOR);
        break;
      case MENORIGUAL:
        t = jj_consume_token(MENORIGUAL);
        break;
      case MAIORIGUAL:
        t = jj_consume_token(MAIORIGUAL);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExpressaoRelacional();

      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  static final public void DeslocamentoBits() throws ParseException {
  Token t = null;
    ExpressaoAditiva();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
    case 92:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        t = jj_consume_token(91);
        break;
      case 92:
        t = jj_consume_token(92);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      DeslocamentoBits();

      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  static final public void ExpressaoAditiva() throws ParseException {
  Token t = null;
    ExpressaoMultiplicativa();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
    case SUBTRACAO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        t = jj_consume_token(SOMA);
        break;
      case SUBTRACAO:
        t = jj_consume_token(SUBTRACAO);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExpressaoAditiva();

      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
  }

  static final public void ExpressaoMultiplicativa() throws ParseException {
  Token t = null;
    ExpressaoUnaria();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLICACAO:
    case DIVISAO:
    case 93:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
        t = jj_consume_token(MULTIPLICACAO);
        break;
      case DIVISAO:
        t = jj_consume_token(DIVISAO);
        break;
      case 93:
        t = jj_consume_token(93);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExpressaoMultiplicativa();

      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  static final public void Constant() throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOAT_LITERAL:
      t = jj_consume_token(FLOAT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_45() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    }
    }
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_scan_token(PV)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(AP)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(FP)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(88)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(87)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(AC)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(AP)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(FP)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(ACO)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(FCO)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    }
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(PV)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(MULTIPLICACAO)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(SUBTRACAO)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(DECREMENTO)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(INCREMENTO)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    if (jj_3R_18()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GramaticaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6b06880,0x6880,0x6b00000,0x6880,0x6880,0x6880,0x6880,0x6880,0x6880,0x0,0x6880,0x0,0x6b00000,0x0,0x0,0x0,0x6880,0x0,0x0,0x0,0x6880,0x0,0x0,0x0,0x0,0x6880,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xc1520732,0xc1520732,0x0,0xc1520732,0xc1520732,0xc1520732,0xc0420000,0xc0420000,0xc0420000,0x30,0xc0420000,0x700,0x0,0x10000000,0x20000000,0x420000,0xc0420000,0x8000,0x10000,0x10000000,0xc0420000,0x20000000,0xc0000000,0xc4000000,0xc4000000,0x420000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x700180,0x700180,0x0,0x700180,0x700180,0x700180,0x700180,0x700180,0x700180,0x0,0x700180,0x0,0x0,0x0,0x0,0x0,0x700180,0x0,0x0,0x0,0x700180,0xffc00,0x700180,0x0,0x0,0x0,0x800000,0x1000000,0x2000000,0x4000000,0x100000,0x30,0x30,0xf,0xf,0x18000000,0x18000000,0xc0,0xc0,0x20000300,0x20000300,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[94];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
